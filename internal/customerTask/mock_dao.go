// Code generated by MockGen. DO NOT EDIT.
// Source: ./dao.go

// Package customerTask is a generated GoMock package.
package customerTask

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDao is a mock of Dao interface
type MockDao struct {
	ctrl     *gomock.Controller
	recorder *MockDaoMockRecorder
}

// MockDaoMockRecorder is the mock recorder for MockDao
type MockDaoMockRecorder struct {
	mock *MockDao
}

// NewMockDao creates a new mock instance
func NewMockDao(ctrl *gomock.Controller) *MockDao {
	mock := &MockDao{ctrl: ctrl}
	mock.recorder = &MockDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDao) EXPECT() *MockDaoMockRecorder {
	return m.recorder
}

// CreateRide mocks base method
func (m *MockDao) CreateRide(createRideReq CreateRideRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRide", createRideReq)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRide indicates an expected call of CreateRide
func (mr *MockDaoMockRecorder) CreateRide(createRideReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRide", reflect.TypeOf((*MockDao)(nil).CreateRide), createRideReq)
}

// UpdateRide mocks base method
func (m *MockDao) UpdateRide(req UpdateRideReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRide", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRide indicates an expected call of UpdateRide
func (mr *MockDaoMockRecorder) UpdateRide(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRide", reflect.TypeOf((*MockDao)(nil).UpdateRide), req)
}

// CancelRide mocks base method
func (m *MockDao) CancelRide(customerTaskId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelRide", customerTaskId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelRide indicates an expected call of CancelRide
func (mr *MockDaoMockRecorder) CancelRide(customerTaskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelRide", reflect.TypeOf((*MockDao)(nil).CancelRide), customerTaskId)
}

// GetHistory mocks base method
func (m *MockDao) GetHistory(customerId int) ([]CustomerHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", customerId)
	ret0, _ := ret[0].([]CustomerHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory
func (mr *MockDaoMockRecorder) GetHistory(customerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockDao)(nil).GetHistory), customerId)
}

// GetRideDetails mocks base method
func (m *MockDao) GetRideDetails(customerTaskId int) (CustomerTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRideDetails", customerTaskId)
	ret0, _ := ret[0].(CustomerTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRideDetails indicates an expected call of GetRideDetails
func (mr *MockDaoMockRecorder) GetRideDetails(customerTaskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRideDetails", reflect.TypeOf((*MockDao)(nil).GetRideDetails), customerTaskId)
}
