// Code generated by MockGen. DO NOT EDIT.
// Source: ./ctrl.go

// Package customerTask is a generated GoMock package.
package customerTask

import (
	address "github.com/atulsinha007/uber/internal/address"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCtrl is a mock of Ctrl interface
type MockCtrl struct {
	ctrl     *gomock.Controller
	recorder *MockCtrlMockRecorder
}

// MockCtrlMockRecorder is the mock recorder for MockCtrl
type MockCtrlMockRecorder struct {
	mock *MockCtrl
}

// NewMockCtrl creates a new mock instance
func NewMockCtrl(ctrl *gomock.Controller) *MockCtrl {
	mock := &MockCtrl{ctrl: ctrl}
	mock.recorder = &MockCtrlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCtrl) EXPECT() *MockCtrlMockRecorder {
	return m.recorder
}

// CreateRide mocks base method
func (m *MockCtrl) CreateRide(createRideReq CreateRideRequest) (CreateRideResponseOnDriverAcceptance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRide", createRideReq)
	ret0, _ := ret[0].(CreateRideResponseOnDriverAcceptance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRide indicates an expected call of CreateRide
func (mr *MockCtrlMockRecorder) CreateRide(createRideReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRide", reflect.TypeOf((*MockCtrl)(nil).CreateRide), createRideReq)
}

// UpdateRide mocks base method
func (m *MockCtrl) UpdateRide(req UpdateRideReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRide", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRide indicates an expected call of UpdateRide
func (mr *MockCtrlMockRecorder) UpdateRide(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRide", reflect.TypeOf((*MockCtrl)(nil).UpdateRide), req)
}

// CancelRide mocks base method
func (m *MockCtrl) CancelRide(customerTaskId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelRide", customerTaskId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelRide indicates an expected call of CancelRide
func (mr *MockCtrlMockRecorder) CancelRide(customerTaskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelRide", reflect.TypeOf((*MockCtrl)(nil).CancelRide), customerTaskId)
}

// GetHistory mocks base method
func (m *MockCtrl) GetHistory(customerId int) ([]CustomerHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", customerId)
	ret0, _ := ret[0].([]CustomerHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory
func (mr *MockCtrlMockRecorder) GetHistory(customerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockCtrl)(nil).GetHistory), customerId)
}

// AssignNearestDriver mocks base method
func (m *MockCtrl) AssignNearestDriver(customerTaskId int, pickupLocation address.Location, preferredRideType string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignNearestDriver", customerTaskId, pickupLocation, preferredRideType)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignNearestDriver indicates an expected call of AssignNearestDriver
func (mr *MockCtrlMockRecorder) AssignNearestDriver(customerTaskId, pickupLocation, preferredRideType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignNearestDriver", reflect.TypeOf((*MockCtrl)(nil).AssignNearestDriver), customerTaskId, pickupLocation, preferredRideType)
}
