// Code generated by MockGen. DO NOT EDIT.
// Source: ./ctrl.go

// Package user is a generated GoMock package.
package user

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCtrl is a mock of Ctrl interface
type MockCtrl struct {
	ctrl     *gomock.Controller
	recorder *MockCtrlMockRecorder
}

// MockCtrlMockRecorder is the mock recorder for MockCtrl
type MockCtrlMockRecorder struct {
	mock *MockCtrl
}

// NewMockCtrl creates a new mock instance
func NewMockCtrl(ctrl *gomock.Controller) *MockCtrl {
	mock := &MockCtrl{ctrl: ctrl}
	mock.recorder = &MockCtrlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCtrl) EXPECT() *MockCtrlMockRecorder {
	return m.recorder
}

// AddUser mocks base method
func (m *MockCtrl) AddUser(user User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser
func (mr *MockCtrlMockRecorder) AddUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockCtrl)(nil).AddUser), user)
}

// AddDriverWithVehicle mocks base method
func (m *MockCtrl) AddDriverWithVehicle(driverWithVehicleReq DriverWithVehicleReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDriverWithVehicle", driverWithVehicleReq)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDriverWithVehicle indicates an expected call of AddDriverWithVehicle
func (mr *MockCtrlMockRecorder) AddDriverWithVehicle(driverWithVehicleReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDriverWithVehicle", reflect.TypeOf((*MockCtrl)(nil).AddDriverWithVehicle), driverWithVehicleReq)
}

// GetDriverProfile mocks base method
func (m *MockCtrl) GetDriverProfile(driverId int) (DriverProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverProfile", driverId)
	ret0, _ := ret[0].(DriverProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriverProfile indicates an expected call of GetDriverProfile
func (mr *MockCtrlMockRecorder) GetDriverProfile(driverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverProfile", reflect.TypeOf((*MockCtrl)(nil).GetDriverProfile), driverId)
}

// UpdateLocation mocks base method
func (m *MockCtrl) UpdateLocation(request UpdateCurrentLocationRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLocation", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLocation indicates an expected call of UpdateLocation
func (mr *MockCtrlMockRecorder) UpdateLocation(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocation", reflect.TypeOf((*MockCtrl)(nil).UpdateLocation), request)
}

// GetDriverHistory mocks base method
func (m *MockCtrl) GetDriverHistory(driverId int) ([]DriverHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverHistory", driverId)
	ret0, _ := ret[0].([]DriverHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriverHistory indicates an expected call of GetDriverHistory
func (mr *MockCtrlMockRecorder) GetDriverHistory(driverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverHistory", reflect.TypeOf((*MockCtrl)(nil).GetDriverHistory), driverId)
}
