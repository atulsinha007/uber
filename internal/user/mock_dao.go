// Code generated by MockGen. DO NOT EDIT.
// Source: ./dao.go

// Package user is a generated GoMock package.
package user

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDao is a mock of Dao interface
type MockDao struct {
	ctrl     *gomock.Controller
	recorder *MockDaoMockRecorder
}

// MockDaoMockRecorder is the mock recorder for MockDao
type MockDaoMockRecorder struct {
	mock *MockDao
}

// NewMockDao creates a new mock instance
func NewMockDao(ctrl *gomock.Controller) *MockDao {
	mock := &MockDao{ctrl: ctrl}
	mock.recorder = &MockDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDao) EXPECT() *MockDaoMockRecorder {
	return m.recorder
}

// Set mocks base method
func (m *MockDao) Set(user User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set
func (mr *MockDaoMockRecorder) Set(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockDao)(nil).Set), user)
}

// GetDriverProfile mocks base method
func (m *MockDao) GetDriverProfile(driverId int) (DriverProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverProfile", driverId)
	ret0, _ := ret[0].(DriverProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriverProfile indicates an expected call of GetDriverProfile
func (mr *MockDaoMockRecorder) GetDriverProfile(driverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverProfile", reflect.TypeOf((*MockDao)(nil).GetDriverProfile), driverId)
}

// UpdateLocation mocks base method
func (m *MockDao) UpdateLocation(req UpdateCurrentLocationRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLocation", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLocation indicates an expected call of UpdateLocation
func (mr *MockDaoMockRecorder) UpdateLocation(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocation", reflect.TypeOf((*MockDao)(nil).UpdateLocation), req)
}

// AddDriverWithVehicle mocks base method
func (m *MockDao) AddDriverWithVehicle(vehicleId string, user User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDriverWithVehicle", vehicleId, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDriverWithVehicle indicates an expected call of AddDriverWithVehicle
func (mr *MockDaoMockRecorder) AddDriverWithVehicle(vehicleId, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDriverWithVehicle", reflect.TypeOf((*MockDao)(nil).AddDriverWithVehicle), vehicleId, user)
}

// GetDriverHistory mocks base method
func (m *MockDao) GetDriverHistory(driverId int) ([]DriverHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverHistory", driverId)
	ret0, _ := ret[0].([]DriverHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriverHistory indicates an expected call of GetDriverHistory
func (mr *MockDaoMockRecorder) GetDriverHistory(driverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverHistory", reflect.TypeOf((*MockDao)(nil).GetDriverHistory), driverId)
}
