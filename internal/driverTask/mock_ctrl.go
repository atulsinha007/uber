// Code generated by MockGen. DO NOT EDIT.
// Source: ./ctrl.go

// Package driverTask is a generated GoMock package.
package driverTask

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCtrl is a mock of Ctrl interface
type MockCtrl struct {
	ctrl     *gomock.Controller
	recorder *MockCtrlMockRecorder
}

// MockCtrlMockRecorder is the mock recorder for MockCtrl
type MockCtrlMockRecorder struct {
	mock *MockCtrl
}

// NewMockCtrl creates a new mock instance
func NewMockCtrl(ctrl *gomock.Controller) *MockCtrl {
	mock := &MockCtrl{ctrl: ctrl}
	mock.recorder = &MockCtrlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCtrl) EXPECT() *MockCtrlMockRecorder {
	return m.recorder
}

// AcceptRideRequest mocks base method
func (m *MockCtrl) AcceptRideRequest(req AcceptRideReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptRideRequest", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptRideRequest indicates an expected call of AcceptRideRequest
func (mr *MockCtrlMockRecorder) AcceptRideRequest(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptRideRequest", reflect.TypeOf((*MockCtrl)(nil).AcceptRideRequest), req)
}

// UpdateRide mocks base method
func (m *MockCtrl) UpdateRide(req UpdateRideReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRide", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRide indicates an expected call of UpdateRide
func (mr *MockCtrlMockRecorder) UpdateRide(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRide", reflect.TypeOf((*MockCtrl)(nil).UpdateRide), req)
}
