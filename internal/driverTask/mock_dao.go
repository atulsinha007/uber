// Code generated by MockGen. DO NOT EDIT.
// Source: ./dao.go

// Package driverTask is a generated GoMock package.
package driverTask

import (
	address "github.com/atulsinha007/uber/internal/address"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDao is a mock of Dao interface
type MockDao struct {
	ctrl     *gomock.Controller
	recorder *MockDaoMockRecorder
}

// MockDaoMockRecorder is the mock recorder for MockDao
type MockDaoMockRecorder struct {
	mock *MockDao
}

// NewMockDao creates a new mock instance
func NewMockDao(ctrl *gomock.Controller) *MockDao {
	mock := &MockDao{ctrl: ctrl}
	mock.recorder = &MockDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDao) EXPECT() *MockDaoMockRecorder {
	return m.recorder
}

// AcceptRideRequest mocks base method
func (m *MockDao) AcceptRideRequest(req AcceptRideReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptRideRequest", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptRideRequest indicates an expected call of AcceptRideRequest
func (mr *MockDaoMockRecorder) AcceptRideRequest(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptRideRequest", reflect.TypeOf((*MockDao)(nil).AcceptRideRequest), req)
}

// UpdateRide mocks base method
func (m *MockDao) UpdateRide(req UpdateRideReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRide", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRide indicates an expected call of UpdateRide
func (mr *MockDaoMockRecorder) UpdateRide(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRide", reflect.TypeOf((*MockDao)(nil).UpdateRide), req)
}

// GetFromDriverIdAndCustomerTaskId mocks base method
func (m *MockDao) GetFromDriverIdAndCustomerTaskId(customerTaskId, driverId int) (DriverTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromDriverIdAndCustomerTaskId", customerTaskId, driverId)
	ret0, _ := ret[0].(DriverTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromDriverIdAndCustomerTaskId indicates an expected call of GetFromDriverIdAndCustomerTaskId
func (mr *MockDaoMockRecorder) GetFromDriverIdAndCustomerTaskId(customerTaskId, driverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromDriverIdAndCustomerTaskId", reflect.TypeOf((*MockDao)(nil).GetFromDriverIdAndCustomerTaskId), customerTaskId, driverId)
}

// FindNearestDriver mocks base method
func (m *MockDao) FindNearestDriver(pickupLocation address.Location, preferredRideType string) (int, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNearestDriver", pickupLocation, preferredRideType)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindNearestDriver indicates an expected call of FindNearestDriver
func (mr *MockDaoMockRecorder) FindNearestDriver(pickupLocation, preferredRideType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNearestDriver", reflect.TypeOf((*MockDao)(nil).FindNearestDriver), pickupLocation, preferredRideType)
}

// CreateDriverTask mocks base method
func (m *MockDao) CreateDriverTask(task DriverTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDriverTask", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDriverTask indicates an expected call of CreateDriverTask
func (mr *MockDaoMockRecorder) CreateDriverTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDriverTask", reflect.TypeOf((*MockDao)(nil).CreateDriverTask), task)
}
